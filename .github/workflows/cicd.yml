name: Laravel CI/CD (MYSQL)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  DB_HOST: 127.0.0.1
  DB_PORT: 3306
  DB_DATABASE: trendwear
  DB_USERNAME: polindra
  DB_PASSWORD: polindra

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: trendwear
          MYSQL_USER: polindra
          MYSQL_PASSWORD: polindra
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -uroot -proot"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, ctype, fileinfo, openssl, PDO, tokenizer, xml, mysql, pdo_mysql
        coverage: none

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-interaction --no-progress

    - name: Configure environment
      run: |
        cp .env.example .env
        echo "APP_KEY=" >> .env
        php artisan key:generate

    - name: Wait for MySQL to be ready
      run: |
        for i in {1..10}; do
          if mysqladmin ping -h${{ env.DB_HOST }} -u${{ env.DB_USERNAME }} -p${{ env.DB_PASSWORD }} --silent; then
            echo "MySQL is ready!"
            break
          fi
          echo "Waiting for MySQL... Attempt $i/10"
          sleep 3
        done

    - name: Run migrations
      run: php artisan migrate:fresh --seed

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install NPM dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Execute tests
      run: php artisan test

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: laravel-app
        path: |
          .
          !.github/
          !.git/
          !node_modules/
          !vendor/
        retention-days: 1

  deploy:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: laravel-app
        path: ./deploy

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Configure known hosts
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Deploy to server
      run: |
        # Create temp directory
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ~/temp-deploy"

        # Sync files (exclude sensitive files)
        rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
          --exclude='.env' \
          --exclude='.git' \
          --exclude='storage' \
          --exclude='node_modules' \
          ./deploy/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/temp-deploy/

        # Run deployment commands
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          # Move to production directory
          sudo rsync -a --delete ~/temp-deploy/ /var/www/laravel-d4rpl2c-kelompok-9/
          
          # Setup permissions
          sudo chown -R www-data:www-data /var/www/laravel-d4rpl2c-kelompok-9/storage
          sudo chown -R www-data:www-data /var/www/laravel-d4rpl2c-kelompok-9/bootstrap/cache
          sudo chmod -R 775 /var/www/laravel-d4rpl2c-kelompok-9/storage
          sudo chmod -R 775 /var/www/laravel-d4rpl2c-kelompok-9/bootstrap/cache

          # Install dependencies
          cd /var/www/laravel-d4rpl2c-kelompok-9
          sudo -u www-data composer install --no-dev --optimize-autoloader
          sudo -u www-data php artisan config:cache
          sudo -u www-data php artisan route:cache
          sudo -u www-data php artisan view:cache
          
          # Cleanup
          rm -rf ~/temp-deploy
        EOF
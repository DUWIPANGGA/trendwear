name: Laravel CI/CD (MYSQL)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: trendwear
          MYSQL_USER: dbeaver
          MYSQL_PASSWORD: "@Polindra123"
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -p$$MYSQL_ROOT_PASSWORD"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, ctype, fileinfo, openssl, PDO, tokenizer, xml, mysql, pdo_mysql
        coverage: none

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-interaction --no-progress

    - name: Configure MySQL
      run: |
        cp .env.example .env
        sed -i 's/^DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env
        sed -i 's/^DB_HOST=.*/DB_HOST=127.0.0.1/' .env
        sed -i 's/^DB_PORT=.*/DB_PORT=3306/' .env
        sed -i 's/^DB_DATABASE=.*/DB_DATABASE=trendwear/' .env
        sed -i 's/^DB_USERNAME=.*/DB_USERNAME=dbeaver/' .env
        sed -i 's/^DB_PASSWORD=.*/DB_PASSWORD=@Polindra123/' .env

    
    - name: Debug database environment
      run: grep DB_ .env

    - name: Generate app key
      run: php artisan key:generate

    - name: Wait for MySQL to be ready
      run: |
        for i in {1..10}; do
          if mysqladmin ping -h127.0.0.1 -upolindra -ppolindra --silent; then
            echo "MySQL is ready!"
            break
          fi
          echo "Waiting for MySQL... Attempt $i/10"
          sleep 3
        done

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install NPM dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Run database migrations and seed
      run: php artisan migrate:fresh --seed

    - name: Execute tests
      run: php artisan test

    - name: Upload artifact for deployment
      uses: actions/upload-artifact@v4
      with:
        name: laravel-app
        path: |
          .
          !.github/
          !.git/
          !node_modules/
          !vendor/
          !storage/debugbar/
        retention-days: 1

  deploy:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: laravel-app
        path: ./deploy

    - name: Deploy to server via SSH and SCP
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        # It's generally more secure to use an SSH key.
        # If your SSH_KEY_PASSWORD is for a passphrase-protected key, use key: ${{ secrets.SSH_KEY }}
        # If it's a direct password for the user, use password: ${{ secrets.SSH_KEY_PASSWORD }}
        password: ${{ secrets.SSH_KEY_PASSWORD }} # Or key: ${{ secrets.SSH_KEY }} if using an SSH private key
        port: 22
        script: |
          # Create temporary directory on the server
          mkdir -p ~/laravel-d4rpl2c-kelompok-9

          # Transfer files from the runner to the temporary directory on the server
          # The 'deploy' directory is where your artifact was downloaded on the runner
          # 'deploy/' refers to the content *inside* the deploy directory on the runner
          # '~/laravel-d4rpl2c-kelompok-9/' is the destination on the server
          scp -o StrictHostKeyChecking=no -r ./deploy/. ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/laravel-d4rpl2c-kelompok-9/

          # Execute deployment script on the server
          # Pindah ke folder sementara
          cd ~/laravel-d4rpl2c-kelompok-9 || exit

          # Backup existing deployment (optional) - ensure /backup directory exists or remove this
          # tar -czf /backup/laravel-backup-$(date +"%Y%m%d%H%M%S").tar.gz /var/www/laravel-d4rpl2c-kelompok-9

          # Copy files ke folder produksi dengan rsync (exclude file sensitif & storage)
          # Note: rsync needs to be installed on your server.
          sudo rsync -avz --delete \
            --exclude='.env' \
            --exclude='storage' \
            --exclude='.git' \
            --exclude='.github' \
            ./ /var/www/laravel-d4rpl2c-kelompok-9/ # Source is now the temporary directory on the server

          # Bikin folder storage/framework dan logs kalau belum ada
          sudo mkdir -p /var/www/laravel-d4rpl2c-kelompok-9/storage/framework/{cache,sessions,testing,views}
          sudo mkdir -p /var/www/laravel-d4rpl2c-kelompok-9/storage/logs

          # Set permission yang bener biar web server bisa akses
          sudo chown -R www-data:www-data /var/www/laravel-d4rpl2c-kelompok-9/storage
          sudo chown -R www-data:www-data /var/www/laravel-d4rpl2c-kelompok-9/bootstrap/cache
          sudo chmod -R 775 /var/www/laravel-d4rpl2c-kelompok-9/storage
          sudo chmod -R 775 /var/www/laravel-d4rpl2c-kelompok-9/bootstrap/cache

          # Masuk ke folder produksi
          cd /var/www/laravel-d4rpl2c-kelompok-9 || exit

          # Jalankan perintah composer & artisan sebagai user www-data
          sudo -u www-data composer install --optimize-autoloader --no-dev
          sudo -u www-data php artisan config:cache
          sudo -u www-data php artisan route:cache
          sudo -u www-data php artisan view:cache
          sudo -u www-data php artisan migrate --force

          # Bersihin folder deploy sementara di home
          rm -rf ~/laravel-d4rpl2c-kelompok-9

          echo "Deployment selesai!"
          EOF